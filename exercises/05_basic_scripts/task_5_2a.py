# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску, как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24,
вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28  в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""

network = input('Введите адрес сети с префиксом(Например 10.1.1.0/24):')
ip = network[:network.find('/')]
ip = ip.split('.')
oct1 = int(ip[0])
oct2 = int(ip[1])
oct3 = int(ip[2])
oct4 = 0 * (int(ip[3]))

ip_tamplate = '''
Network
{0:<8} {1:<8} {2:<8} {3:<8}
{0:<08b} {1:<08b} {2:<08b} {3:<08b}
'''

print(ip_tamplate.format(oct1, oct2, oct3, oct4))

mask = network[network.find('/')::]
mask = mask.lstrip('/')
maskint = int(mask)
maskbit = '1' * maskint
maskbit = "{:<032}".format(maskbit)
moct1 = int(maskbit[0:8], 2)
moct2 = int(maskbit[8:16], 2)
moct3 = int(maskbit[16:24], 2)
moct4 = int(maskbit[24:32], 2)

mask_template = '''
Mask:
{4:<}
{0:<8} {1:<8} {2:<8} {3:<8}
{0:<8b} {1:<8b} {2:<8b} {3:<8b}
'''
print(mask_template.format(moct1, moct2, moct3, moct4, mask))
